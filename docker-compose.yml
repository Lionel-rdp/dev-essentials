services:
  mssql:
    image: mysql:8.0
    container_name: mysql_server
    environment:
      - MYSQL_ROOT_PASSWORD=root_password
      - MYSQL_DATABASE=database
      - MYSQL_USER=user
      - MYSQL_PASSWORD=password
    ports:
      - "3306:3306"
    networks:
      - app_network
    volumes:
      - sql_data:/var/opt/mssql
    restart: always

  redis:
    image: redis:latest
    container_name: redis_server
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    networks:
      - app_network
    restart: always
  # redisinsight: A GUI to interact with Redis
  redisinsight:
    image: redis/redisinsight:latest
    container_name: redisinsight
    ports:
      - "5540:5540" 
    volumes:
      - redisinsight_data:/data
    depends_on:
      - redis
  # minio: S3 compatible object store
  minio:
    image: minio/minio
    container_name: minio
    ports:
      - "9000:9000"  # S3 API
      - "9001:9001"  # MinIO Console
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin123
    volumes:
      - ~/minio/data:/data
    command: server /data --console-address ":9001"
    restart: unless-stopped

  memcache:
    image: memcached:latest
    container_name: memcache_server
    ports:
      - "11211:11211"
    networks:
      - app_network
    restart: always
  solace:
    container_name: pubSubStandardSingleNode
    image: solace/solace-pubsub-standard:latest
    volumes:
      - "storage-group:/var/lib/solace"
    shm_size: 1g
    ulimits:
      core: -1
      nofile:
        soft: 2448
        hard: 1048576
    deploy:
      restart_policy:
        condition: on-failure
        max_attempts: 1
    ports:
      - "8082:8080"
      - "55555:55555"
      - "8008:8008"
      - "9100:9000"     # âœ… REST messaging for Postman
    environment:
      - username_admin_globalaccesslevel=admin
      - username_admin_password=admin
      - system_scaling_maxconnectioncount=100
  # redis-master:
  #   image: redis:7.2
  #   container_name: redis-master
  #   restart: always
  #   ports:
  #     - "6379:6379"
  #   volumes:
  #     - redis_master:/data

  # redis-slave:
  #   image: redis:7.2
  #   container_name: redis-slave
  #   ports:
  #     - "6479:6379"
  #   volumes:
  #     - redis_slave:/data
  #   restart: always
  #   command: redis-server --slaveof redis-master 6379

networks:
  app_network:
    driver: bridge
  redis-cluster:
    driver: bridge

volumes:
  sql_data:
  redis-data:
  redisinsight_data:
  storage-group:
  # redis_master:
  # redis_slave: